import pytest
import sys
import os

# Adicionar o diretÃ³rio raiz ao path para encontrar os mÃ³dulos
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), '..')))

from ai_studio_automator import AIStudioAutomator

@pytest.fixture(scope="session")
def automator():
    """
    Fixture do Pytest para inicializar e finalizar o AIStudioAutomator.
    Ã‰ executado uma vez por sessÃ£o de teste.
    """
    print("ðŸš€ [Fixture] Inicializando automator para a sessÃ£o de teste...")
    instance = AIStudioAutomator(headless=True)

    # Realizar login uma vez para toda a sessÃ£o de teste
    try:
        instance.initialize_browser()
        if not instance.check_if_logged_in():
            print("ðŸ”‘ [Fixture] SessÃ£o nÃ£o encontrada, executando login rÃ¡pido...")
            if not instance.quick_login():
                pytest.fail("Falha no login rÃ¡pido durante a configuraÃ§Ã£o do teste.", pytrace=False)
        print("âœ… [Fixture] Login verificado com sucesso.")
    except Exception as e:
        pytest.fail(f"Erro durante a inicializaÃ§Ã£o do automator no fixture: {e}", pytrace=False)

    yield instance

    # Limpeza apÃ³s todos os testes da sessÃ£o serem concluÃ­dos
    print("\nðŸ”„ [Fixture] Finalizando automator e limpando recursos...")
    instance.cleanup()
    print("âœ… [Fixture] Recursos limpos.")

class TestAIStudioAutomator:
    """
    Agrupa os testes para o AIStudioAutomator.
    Usa a fixture 'automator' para ter uma instÃ¢ncia prÃ©-configurada.
    """

    def test_navigation(self, automator):
        """Testa a navegaÃ§Ã£o bÃ¡sica para a pÃ¡gina inicial."""
        print("\nðŸ§ª Teste: NavegaÃ§Ã£o para AI Studio")
        success = automator.navigate_to_studio_home()
        assert success, "A navegaÃ§Ã£o para a pÃ¡gina inicial do AI Studio falhou."

    def test_chat_creation(self, automator):
        """Testa a criaÃ§Ã£o de um novo chat."""
        print("\nðŸ§ª Teste: CriaÃ§Ã£o de Novo Chat")
        success = automator.create_new_chat()
        assert success, "A criaÃ§Ã£o de um novo chat falhou."

    def test_message_input_detection(self, automator):
        """Testa a detecÃ§Ã£o do campo de mensagem."""
        print("\nðŸ§ª Teste: DetecÃ§Ã£o de Campo de Mensagem")
        # Assegura que um chat foi criado antes de procurar o input
        if not automator.current_chat_url:
            automator.create_new_chat()

        input_field = automator.find_message_input()
        assert input_field is not None, "O campo de entrada de mensagem nÃ£o foi encontrado."

    def test_complete_interaction(self, automator):
        """Testa uma interaÃ§Ã£o completa, enviando uma mensagem e esperando uma resposta."""
        print("\nðŸ§ª Teste: InteraÃ§Ã£o Completa")
        test_message = "OlÃ¡! Responda apenas 'Funcionando!' para confirmar que vocÃª recebeu esta mensagem."
        result = automator.complete_interaction(test_message)
        assert result is not None, "O mÃ©todo complete_interaction retornou None."
        assert "response" in result and result["response"], "A interaÃ§Ã£o falhou ou nÃ£o houve resposta."
        assert len(result["response"]) > 0, "A resposta recebida estÃ¡ vazia."

    def test_conversation_saving(self, automator):
        """Testa a funcionalidade de salvar a conversa."""
        print("\nðŸ§ª Teste: Salvamento de Conversas")
        # Garante que hÃ¡ algo para salvar
        if not automator.conversation_history:
            automator.complete_interaction("Mensagem de teste para salvar.")

        conversation_file = automator.save_conversation("test_conversation.json")
        assert conversation_file is not None, "O salvamento da conversa retornou None."
        assert os.path.exists(conversation_file), f"O arquivo de conversa '{conversation_file}' nÃ£o foi encontrado."
